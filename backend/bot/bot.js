require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { SupportTicket, User } = require('../models/models');

const token = process.env.BOT_TOKEN;
if (!token) throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');

const adminId = parseInt(process.env.ADMIN_ID);
if (!adminId) throw new Error('ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');

const bot = new TelegramBot(token, { polling: true });

const adminStates = {};
const userStates = {};

function getLocalizedStatus(status) {
    switch (status) {
        case 'new':
            return 'üü° –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏';
        case 'answered':
            return '‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ';
        default:
            return status;
    }
}

function getStartKeyboard() {
    return {
        reply_markup: {
            keyboard: [[{ text: '–ù–∞—á–∞—Ç—å' }]],
            resize_keyboard: true,
            one_time_keyboard: false,
            input_field_placeholder: '–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'
        }
    };
}

function getMainMenuKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üí¨ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', callback_data: 'report_issue' }],
                [{ text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'check_status' }]
            ]
        }
    };
}

function getAdminMenuKeyboard() {
    return {
        reply_markup: {
            keyboard: [
                [{ text: 'üì¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        }
    };
}

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const from = msg.from; 
    
    if (chatId === adminId) {
        await bot.sendMessage(chatId, '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∫–∂–∞!', getAdminMenuKeyboard());
        return;
    }

    const existingUser = await User.findOne({ where: { user_id: chatId } });
    const hasStarted = existingUser?.hasStarted || false;

    if (!existingUser) {
        await User.create({
            user_id: chatId,
            email: `${chatId}@guest.local`,
            password_hash: 'no_password',
            role: 'GUEST',
            hasStarted: true
        });
    }

    if (!hasStarted) {
        await bot.sendMessage(
    chatId,
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${from.first_name}!\n\nü§ñ –ú—ã ‚Äî —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ Quizzarium.\n\n–ì–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.`,
    getStartKeyboard());
    } else {
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
    }
});

bot.onText(/\/tickets/, async (msg) => {
    showNewTickets(msg.chat.id);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const from = msg.from;
    const text = msg.text;

    if (from.is_bot) return;

    if (chatId === adminId) {
        const state = adminStates[chatId];

        if (state?.mode === 'awaiting_reply') {
            const ticketId = state.ticket_id;
            const ticket = await SupportTicket.findByPk(ticketId);

            if (!ticket) {
                await bot.sendMessage(chatId, '–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
                delete adminStates[chatId];
                return;
            }

            try {
                await bot.sendMessage(ticket.user_id, `üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n${text}`);
                await ticket.update({ status: 'answered', response: text });
                await bot.sendMessage(chatId, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (‚Ññ ${ticketId}).`);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', err.message);
                await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
            }

            delete adminStates[chatId];
            return;
        }

        if (text === 'üì¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è') {
            showNewTickets(chatId);
        }

        if (text === 'üö™ –í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞') {
            await bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', getStartKeyboard());
        }

        return; 
    }

    const currentState = userStates[chatId];

    if (text === '–ù–∞—á–∞—Ç—å') {
        let user = await User.findOne({ where: { user_id: chatId } });
        if (user && !user.hasStarted) {
            await user.update({ hasStarted: true });
        }

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
        return;
    }

    if (currentState === 'awaiting_issue') {
        let user = await User.findOne({ where: { user_id: from.id } }) || await User.create({
            user_id: from.id,
            email: `${from.id}@guest.local`,
            password_hash: 'no_password',
            role: 'CLIENT',
            hasStarted: true
        });

        const ticket = await SupportTicket.create({
            user_id: from.id,
            username: from.username,
            message: text,
            status: 'new'
        });

        await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        await bot.sendMessage(adminId, `üîî –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @${from.username || 'no_username'} (ID: ${from.id}):\n\n${text}`);

        delete userStates[chatId];
        return;
    }

    const dbUser = await User.findOne({ where: { user_id: chatId } });
    if (dbUser?.hasStarted && !currentState && text !== '–ù–∞—á–∞—Ç—å') {
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenuKeyboard());
    }
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (chatId === adminId) {
        if (data.startsWith('reply_')) {
            const ticketId = parseInt(data.split('_')[1]);
            adminStates[chatId] = { mode: 'awaiting_reply', ticket_id: ticketId };
            await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ ${ticketId}:`);
        }
    }

    if (chatId !== adminId) {
        if (data === 'report_issue') {
            userStates[chatId] = 'awaiting_issue';
            await bot.sendMessage(chatId, '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!');
        }

        if (data === 'check_status') {
    const tickets = await SupportTicket.findAll({
        where: { user_id: chatId },
        order: [['createdAt', 'DESC']]
    });

    if (!tickets.length) {
        await bot.sendMessage(chatId, '–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.');
        return;
    }

    let response = '–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n';

    tickets.forEach(t => {
        const localizedStatus = getLocalizedStatus(t.status);
        response += `‚Ññ ${t.ticket_id}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${t.message}\n–°—Ç–∞—Ç—É—Å: ${localizedStatus}`;

        if (t.response) {
            response += `\n\nüì© –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n${t.response}`;
        }

        response += '\n\n';
    });

    await bot.sendMessage(chatId, response);
    userStates[chatId] = 'awaiting_ticket_id';
}
    }

    await bot.answerCallbackQuery(query.id);
});

async function showNewTickets(chatId) {
    try {
        const tickets = await SupportTicket.findAll({
            where: { status: 'new' },
            order: [['createdAt', 'DESC']]
        });

        if (!tickets.length) {
            await bot.sendMessage(chatId, '–ù–µ—Ç –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.');
            return;
        }

        let response = "üîî –í—Å–µ –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n";

        tickets.forEach(t => {
            const localizedStatus = getLocalizedStatus(t.status);
            response += `‚Ññ ${t.ticket_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${t.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${t.message}\n\n`;
        });

        await bot.sendMessage(chatId, response);

        const replyButtons = tickets.map(ticket => [{
            text: `–û—Ç–≤–µ—Ç–∏—Ç—å ‚Ññ${ticket.ticket_id}`,
            callback_data: `reply_${ticket.ticket_id}`
        }]);

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', {
            reply_markup: {
                inline_keyboard: replyButtons
            }
        });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ–±—Ä–∞—â–µ–Ω–∏–π:', err.message);
        await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è.');
    }
}